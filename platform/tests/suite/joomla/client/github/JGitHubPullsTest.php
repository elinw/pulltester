<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  Client
 *
 * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM.'/joomla/client/github.php';
require_once JPATH_PLATFORM.'/joomla/client/github/pulls.php';

/**
 * Test class for JLDAP.
 * Generated by PHPUnit on 2009-10-08 at 21:48:52.
 */
class JGithubPullsTest extends PHPUnit_Framework_TestCase
{
	protected function getMethod($name)
	{
		$class = new ReflectionClass('JGithubPulls');
		$method = $class->getMethod($name);
		$method->setAccessible(true);
		return $method;
	}

	/**
	 * Tests the getAll method - with open state
	 */
	public function testGetAllOpen()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getAll('joomla','joomla-platform'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the getAll method - with closed state
	 */
	public function testGetAllClosed()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls?state=closed')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getAll('joomla','joomla-platform', 'closed'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the get method
	 */
	public function testGet()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/325')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->get('joomla', 'joomla-platform', 325),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the create method
	 */
	public function testCreate()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$pull = new stdClass;
		$pull->title = 'My Pull Request';
		$pull->base = 'staging';
		$pull->head = 'joomla-jenkins:mychanges';
		$pull->body = 'These are my changes - please review them';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls', 'post', $pull)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->create('joomla', 'joomla-platform', 'My Pull Request', 'staging', 'joomla-jenkins:mychanges', 'These are my changes - please review them'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the createFromIssue method
	 */
	public function testCreateFromIssue()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$pull = new stdClass;
		$pull->base = 'staging';
		$pull->head = 'joomla-jenkins:mychanges';
		$pull->issue = 39;

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls', 'post', $pull)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->createFromIssue('joomla', 'joomla-platform', 39, 'staging', 'joomla-jenkins:mychanges'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the edit method
	 */
	public function testEdit()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$pull = new stdClass;
		$pull->title = 'new title';
		$pull->body = 'Check out my pull request';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/39', 'patch', $pull)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->edit('joomla', 'joomla-platform', 39, 'new title', 'Check out my pull request'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the getCommits method
	 */
	public function testGetCommits()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/219/commits')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getCommits('joomla','joomla-platform', 219),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the getFiles method
	 */
	public function testGetFiles()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/219/files')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getFiles('joomla','joomla-platform', 219),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the isMerged method when the pull request has been merged
	 */
	public function testIsMergedTrue()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/65/merge')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->isMerged('joomla', 'joomla-platform', 65),
			$this->equalTo(true),
			'isMerged not called with the proper arguments'
		);
	}

	/**
	 * Tests the isMerged method when the pull request has not been merged
	 */
	public function testIsMergedFalse()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 404;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/65/merge')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->isMerged('joomla', 'joomla-platform', 65),
			$this->equalTo(false),
			'isMerged not called with the proper arguments'
		);
	}

	/**
	 * Tests the merge method
	 */
	public function testMerge()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/219/merge', 'put', array('commit_message' => 'My Message'))
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->merge('joomla','joomla-platform', 219, 'My Message'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the getComments method
	 */
	public function testGetComments()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/219/comments')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getComments('joomla', 'joomla-platform', 219),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the getComment method
	 */
	public function testGetComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/comments/435')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->getComment('joomla', 'joomla-platform', 435),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the createComment method
	 */
	public function testCreateComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$comment = new stdClass;
		$comment->body = 'What a fine comment this is';
		$comment->commit_id = '6dcb09b5b57875f334f61aebed695e2e4193db5e';
		$comment->path = 'file1';
		$comment->position = 25;

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/365/comments', 'post', $comment)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->createComment('joomla', 'joomla-platform', 365, 'What a fine comment this is', '6dcb09b5b57875f334f61aebed695e2e4193db5e', 'file1', 25),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the createCommentReply method
	 */
	public function testCreateCommentReply()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$comment = new stdClass;
		$comment->body = 'What a fine comment this is';
		$comment->in_reply_to = 394;

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/365/comments', 'post', $comment)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->createCommentReply('joomla', 'joomla-platform', 365, 'What a fine comment this is', '394'),
			$this->equalTo('Returned Data'),
			'Create Comment not called with the proper arguments'
		);
	}

	/**
	 * Tests the editComment method
	 */
	public function testEditComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/comments/7342', 'patch', array('body' => 'What a fine comment this is'))
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->editComment('joomla', 'joomla-platform', 7342, 'What a fine comment this is'),
			$this->equalTo('Returned Data')
		);
	}

	/**
	 * Tests the deleteComment method
	 */
	public function testDeleteComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$pulls = new JGithubPulls($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/repos/joomla/joomla-platform/pulls/comments/7342', 'delete')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$pulls->deleteComment('joomla', 'joomla-platform', 7342),
			$this->equalTo('')
		);
	}
}
