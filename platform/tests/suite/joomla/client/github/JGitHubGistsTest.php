<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  Client
 *
 * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM.'/joomla/client/github.php';
require_once JPATH_PLATFORM.'/joomla/client/github/gists.php';

/**
 * Test class for JLDAP.
 * Generated by PHPUnit on 2009-10-08 at 21:48:52.
 */
class JGithubGistsTest extends PHPUnit_Framework_TestCase
{
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown()
	{
	}

	public function paginateData()
	{
		return array(
			'No query string, no page, no per page' => array('/gists/test', 0, 0, '/gists/test'),
			'No query string, no page, per page' => array('/gists/test', 0, 50, '/gists/test?per_page=50'),
			'No query string, page, no per page' => array('/gists/test', 5, 0, '/gists/test?page=5'),
			'No query string, page, per page' => array('/gists/test', 5, 30, '/gists/test?page=5&per_page=30'),
			'Query String, no page, no per page' => array('/gists/test?foo=bar', 0, 0, '/gists/test?foo=bar'),
			'Query String, no page, per page' => array('/gists/test?foo=bar', 0, 50, '/gists/test?foo=bar&per_page=50'),
			'Query String, page, no per page' => array('/gists/test?foo=bar', 5, 0, '/gists/test?foo=bar&page=5'),
			'Query String, page, per page' => array('/gists/test?foo=bar', 5, 30, '/gists/test?foo=bar&page=5&per_page=30')
		);
	}

	protected function getMethod($name)
	{
		$class = new ReflectionClass('JGithubGists');
		$method = $class->getMethod($name);
		$method->setAccessible(true);
		return $method;
	}

	/**
	 * Tests the paginate method
	 * 
	 * @dataProvider paginateData
	 */
	public function testPaginate($url, $page, $per_page, $expected)
	{
		$method = $this->getMethod('paginate');
		
		$object = new JGithubGists(null);
		$this->assertEquals($expected, $method->invokeArgs($object, array($url, $page, $per_page)));
	}

	/**
	 * Tests the getAll method
	 */
	public function testGetAll()
	{
		
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->getAll(),
			$this->equalTo('Returned Data'),
			'Get gists not called with the proper arguments'
		);
	}

	/**
	 * Tests the getByUser method
	 */
	public function testGetByUser()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/users/testUser/gists')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->getByUser('testUser'),
			$this->equalTo('Returned Data'),
			'Get gists by user not called with the proper arguments'
		);
	}

	/**
	 * Tests the getPublic method
	 */
	public function testGetPublic()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/public')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->getPublic(),
			$this->equalTo('Returned Data'),
			'Get public gists not called with the proper arguments'
		);
	}

	/**
	 * Tests the getStarred method
	 */
	public function testGetStarred()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/starred')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->getStarred(),
			$this->equalTo('Returned Data'),
			'Get starred gists not called with the proper arguments'
		);
	}

	/**
	 * Tests the get method
	 */
	public function testGet()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/54')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->get(54),
			$this->equalTo('Returned Data'),
			'Get not called with the proper arguments'
		);
	}

	/**
	 * Tests the create method
	 */
	public function testCreate()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$gist = new stdClass;
		$gist->public = true;
		$gist->files = array('file1.txt' => 'This is a file');
		$gist->description = 'My Gist Rocks';


		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists', 'post', $gist)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->create(array('file1.txt' => 'This is a file'), true, 'My Gist Rocks'),
			$this->equalTo('Returned Data'),
			'Create not called with the proper arguments'
		);
	}

	/**
	 * Tests the edit method
	 */
	public function testEdit()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$gist = new stdClass;
		$gist->files = array('file1.txt' => 'This is a file');
		$gist->description = 'My Gist Rocks More';


		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65', 'patch', $gist)
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->edit(65, array('file1.txt' => 'This is a file'), true, 'My Gist Rocks More'),
			$this->equalTo('Returned Data'),
			'Edit not called with the proper arguments'
		);
	}

	/**
	 * Tests the star method
	 */
	public function testStar()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65/star', 'put')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->star(65),
			$this->equalTo(''),
			'star not called with the proper arguments'
		);
	}

	/**
	 * Tests the unstar method
	 */
	public function testUnstar()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65/star', 'delete')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->unstar(65),
			$this->equalTo(''),
			'unstar not called with the proper arguments'
		);
	}

	/**
	 * Tests the isStarred method when the gist is starred
	 */
	public function testIsStarredTrue()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65/star')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->isStarred(65),
			$this->equalTo(true),
			'isStarred not called with the proper arguments'
		);
	}

	/**
	 * Tests the isStarred method when the gist is not starred
	 */
	public function testIsStarredFalse()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 404;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65/star')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->isStarred(65),
			$this->equalTo(false),
			'isStarred not called with the proper arguments'
		);
	}

	/**
	 * Tests the fork method
	 */
	public function testFork()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Response Body';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65/fork', 'put')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->fork(65),
			$this->equalTo('Response Body'),
			'fork not called with the proper arguments'
		);
	}

	/**
	 * Tests the delete method
	 */
	public function testDelete()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/65', 'delete')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->delete(65),
			$this->equalTo(''),
			'delete not called with the proper arguments'
		);
	}

	/**
	 * Tests the getComments method
	 */
	public function testGetComments()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/723/comments')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->getComments(723),
			$this->equalTo('Returned Data'),
			'Get Comments gists not called with the proper arguments'
		);
	}

	/**
	 * Tests the getComment method
	 */
	public function testGetComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/comments/235')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->getComment(235),
			$this->equalTo('Returned Data'),
			'Get Comment not called with the proper arguments'
		);
	}

	/**
	 * Tests the createComment method
	 */
	public function testCreateComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 201;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/365/comments', 'post', array('body' => 'What a fine comment this is'))
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->createComment(365, 'What a fine comment this is'),
			$this->equalTo('Returned Data'),
			'Create Comment not called with the proper arguments'
		);
	}

	/**
	 * Tests the editComment method
	 */
	public function testEditComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 200;
		$returnData->body = 'Returned Data';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/comments/7342', 'patch', array('body' => 'What a fine comment this is'))
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->editComment(7342, 'What a fine comment this is'),
			$this->equalTo('Returned Data'),
			'Edit Comment not called with the proper arguments'
		);
	}

	/**
	 * Tests the deleteComment method
	 */
	public function testDeleteComment()
	{
		$connector = $this->getMock('sendRequest', array('sendRequest'));

		$gists = new JGithubGists($connector);

		$returnData = new stdClass;
		$returnData->code = 204;
		$returnData->body = '';

		$connector->expects($this->once())
			->method('sendRequest')
			->with('/gists/comments/7342', 'delete')
			->will($this->returnValue($returnData));

		$this->assertThat(
			$gists->deleteComment(7342),
			$this->equalTo(''),
			'Delete Comment not called with the proper arguments'
		);
	}
}
